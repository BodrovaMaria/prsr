import math
import os

import docx
import numpy as np
from fcmeans import FCM
from itertools import cycle
import matplotlib.pyplot as plt
from pyparsing import col
from sklearn.manifold import TSNE

teksts_path=input("Enter directory: ")
teksts_number=int(input("Enter number of texts: "))

#собираем словарь
allwords=['']*teksts_number
a=0
for p in range(9):
    for d in range(200):
        tokens = []
        full_teksts_path = os.path.join(teksts_path, str(p + 1) + '\\' + str(d + 1) + '.docx')
        text = ''
        f = docx.Document(full_teksts_path)
        for paragraph in f.paragraphs:
            text += paragraph.text + ' '
        for token in text.split():
            if token:
                token = token.strip()
                tokens.append(token)
        allwords[a] = tokens
        a = a + 1

bvoc=[]
voc=[]
for i in allwords:
    bvoc.extend(i)
for i in bvoc:
    if i not in voc:
        voc.append(i)
voclen=len(voc)

#tf-idf
#обычная модель
tf=[0]*teksts_number
for i in range (teksts_number):
    tf[i]=[0]*voclen
for i in range (len(tf)):
    for j in range (len(tf[i])):
        if (allwords[i].count(voc[j])):
            tf[i][j]=allwords[i].count(voc[j]) / len(allwords[i])
        else:
            tf[i][j]=0.0

idf=[0]*voclen
for j in range(len(tf[0])):
    docswword=0
    for i in range(len(tf)):
        if tf[i][j]:
            docswword = docswword + 1
    idf[j] = math.log(teksts_number / docswword, 10)

tf_idf=[0]*teksts_number
for i in range (teksts_number):
    tf_idf[i]=[0]*voclen
for i in range (len(tf_idf)):
    for j in range (len(tf_idf[i])):
        tf_idf[i][j]=tf[i][j] * idf[i]
X = np.array(tf_idf)
colors = cycle("bgrmckbgrmckbgrymckbgrmk")

fcm = FCM(n_clusters=5, random_state=1000, max_iter=1000)
fcm.fit(X)
fcm_centers = fcm.centers
fcm_labels = fcm.predict(X)
Y = TSNE(n_components=2, random_state=0, perplexity=15, init='pca').fit_transform(X)
for k, col in zip(range(len(fcm_centers)), colors):
    class_members = fcm_labels == k
    plt.plot(Y[class_members, 0], Y[class_members, 1], col + ".")
    plt.title('Обычная модель\nКоличество кластеров = 5 \nКоличество итераций = 1000')



plt.show()

